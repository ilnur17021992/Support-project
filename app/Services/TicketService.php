<?php

namespace App\Services;

use App\Models\User;
use App\Models\Ticket;
use App\Notifications\NewMessage;
use App\Services\TelegramBotService;
use Illuminate\Support\Facades\Storage;
use TelegramBot\Api\Types\Inline\InlineKeyboardMarkup;

class TicketService
{
    public function __construct(private $bot = new TelegramBotService)
    {
    }

    public function create($ticketData)
    {
        $ticket = Ticket::create($ticketData);

        $this->bot->sendMessage($ticket->user->telegram_id, '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —É–∂–µ –ø—Ä–∏—Å—Ç—É–ø–∞—é—Ç –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!');
        $this->send($ticket, $ticketData);

        return $ticket;
    }

    public function send($ticket, $message)
    {
        $user = User::find($message['user_id']);
        $text = $message['message'];
        $url = route('platform.ticket.messages', ['ticket' => $ticket->id]);
        $group = $user->hasAccess('platform.systems.support') ? 'Support:' : 'User:';
        $status = $user->hasAccess('platform.systems.support') ? 'processing' : 'new';
        $type = $user->hasAccess('platform.systems.support') ? '–û—Ç–≤–µ—Ç —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ üëî' : '–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úâÔ∏è';
        if ($ticket->messages()->count() == 0) $type = '–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç üõü';

        $user->hasAccess('platform.systems.support')
            ? $ticket->user->notify(new NewMessage($user->name, $text, $url))
            : User::where('permissions->platform.systems.support', 1)->get()->each(fn ($support) => $support->notify(new NewMessage($user->name, $text, $url)));

        $ticketMessage =
            '<b>Time: </b><code>' . date('d.m.Y H:i:s') . '</code>' . "\n" .
            '<b>Type: </b><code>' . $type . '</code>' . "\n" .
            '<b>ID: </b><code>' . $ticket->id . '</code>' . "\n" .
            '<b>Department: </b><code>' . Ticket::DEPARTMENT[$ticket->department] . '</code>' . "\n" .
            '<b>' . $group . '</b> <code>' . $user->name . '</code>' . "\n" .
            '<b>Title: </b><code>' . $ticket->title . '</code>' . "\n" .
            '<b>Message: </b><code>' . $text . '</code>' . "\n";

        $buttons = [['text' => 'üõü View', 'url' => $url]];
        if (isset($message['file'])) $buttons[] = ['text' => 'üíæ Open', 'url' => Storage::url($message['file'])];
        $buttons[] = ['text' => '‚ùå Close', 'callback_data' => 'close_ticket'];
        $keyboard = new InlineKeyboardMarkup([$buttons]);

        if ($user->id != $ticket->user->id) $this->bot->sendMessage($ticket->user->telegram_id, $text);
        $messageId = $this->bot->sendMessage(config('services.telegram_bot_api.ticket_chat_id'), $ticketMessage, $keyboard)->getMessageId();
        $message['telegram_message_id'] = $messageId;
        $lastMessage = $ticket->messages()->latest()->first();

        if ($lastMessage) $this->bot->unpinMessage($lastMessage->telegram_message_id);
        $user->hasAccess('platform.systems.support') ?: $this->bot->pinMessage($messageId);
        $ticket->update(['status' => $status]);
        $ticket->messages()->create($message);
    }

    public function close($id)
    {
        $ticket = Ticket::find($id);
        $lastMessage = $ticket->messages()->latest()->first();;

        if ($ticket->status == 'closed') return false;

        $ticket->update(['status' => 'closed']);
        $this->bot->unpinMessage($lastMessage->telegram_message_id);
        $this->bot->sendMessage($ticket->user->telegram_id, '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—Ç–∏—Ç—å!');

        return true;
    }
}
